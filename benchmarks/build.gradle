def packageName = "zerolog-benchmarks"
version = project(":").version

dependencies {
  compile project(":")

  testCompile "com.obsidiandynamics.fulcrum:fulcrum-dyno:${fulcrumVersion}"
  testCompile "com.obsidiandynamics.fulcrum:fulcrum-testmark:${fulcrumVersion}"
  testCompile "org.slf4j:slf4j-api:${slf4jVersion}"
  testCompile "log4j:log4j:${log4jVersion}"
  testCompile "org.tinylog:tinylog:${tinylogVersion}"
  testCompile "org.openjdk.jmh:jmh-core:${jmhVersion}"

  testRuntime "com.obsidiandynamics.fulcrum:fulcrum-launcher:${fulcrumVersion}"
  testRuntime "org.slf4j:slf4j-log4j12:${slf4jVersion}"
}

task launch(dependsOn: testClasses) {
  doLast {
    def launcherClasses = new ArrayList()
    launcherClasses += "com.obsidiandynamics.zerolog.bench.AllBenchmarks"
    launcherClasses += "com.obsidiandynamics.zerolog.bench.BaselineBenchmark"
    launcherClasses += "com.obsidiandynamics.zerolog.bench.JulBenchmark"
    launcherClasses += "com.obsidiandynamics.zerolog.bench.JulLambdaBenchmark"
    launcherClasses += "com.obsidiandynamics.zerolog.bench.Log4jBenchmark"
    launcherClasses += "com.obsidiandynamics.zerolog.bench.Slf4jBenchmark"
    launcherClasses += "com.obsidiandynamics.zerolog.bench.TinyLogBenchmark"
    launcherClasses += "com.obsidiandynamics.zerolog.bench.ZlgBenchmark"
    
    def perfJvmArgs = "-XX:-MaxFDLimit -XX:+TieredCompilation -XX:+UseNUMA -XX:+UseCondCardMark " + 
                      "-XX:+UseBiasedLocking -Xms2G -Xmx2G -Xss1M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 " + 
                      "-XX:InitiatingHeapOccupancyPercent=0 -Djava.net.preferIPv4Stack=true " + 
                      "-Dlauncher.package.compress.level=3"
    javaexec {
      systemProperties = System.properties
      classpath = sourceSets.test.runtimeClasspath
      main = "com.obsidiandynamics.launcher.Launcher"
      args = launcherClasses
      jvmArgs = Arrays.asList(perfJvmArgs.split(" ")) + baseJvmArgs
      standardInput = System.in
    }
  }
}

jar {
  baseName packageName
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  baseName packageName
  classifier = "javadoc"
  from "$buildDir/docs/javadoc"
}

task sourcesJar(type: Jar) {
  baseName packageName
  from sourceSets.main.allSource
  classifier = "sources"
}
 
artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project(":").group
      artifactId packageName
      version project(":").version
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      url "${project(':').projectDir}/../repo"
    }
  }
}

def envUser = "BINTRAY_USER"
def envKey = "BINTRAY_KEY"
def packageDesc = "Benchmarks"
def repoName = "zerolog"
bintray {
  user = System.getenv(envUser)
  key = System.getenv(envKey)
  publications = ["mavenJava"]
  pkg {
    repo = "${repoName}"
    name = packageName
    userOrg = "obsidiandynamics"
    desc = packageDesc
    websiteUrl = "https://github.com/obsidiandynamics/${repoName}"
    licenses = ["BSD New"]
    vcsUrl = "https://github.com/obsidiandynamics/${repoName}"
    issueTrackerUrl = "https://github.com/obsidiandynamics/${repoName}/issues"
    publicDownloadNumbers = true
    githubRepo = "obsidiandynamics/${repoName}"
    override = true
    publish = true
    version {
      name = project(":").version
      desc = packageDesc
      released  = new Date()
      vcsTag = project(":").version
    }
  }
}