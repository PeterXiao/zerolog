plugins {
  id "com.jfrog.bintray" version "1.7.3"
}
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

group = "com.obsidiandynamics.zerolog"
version = "0.7.0-SNAPSHOT"
  
def envUser = "BINTRAY_USER"
def envKey = "BINTRAY_KEY"
task bintrayCredentialsCheck {
  doLast {
    if (System.getenv(envUser) == null) {
      throw new GradleException("No Bintray username specified; set with 'export ${envUser}=<username>'")
    }
    if (System.getenv(envKey) == null) {
      throw new GradleException("No Bintray key specified; set with 'export ${envKey}=<key>'")
    }
  }
}

allprojects {
  apply plugin: "java"
  apply plugin: "jacoco"
  apply plugin: "maven-publish"
  apply plugin: "com.jfrog.bintray"
  
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    jcenter()
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots"
    }
  }
  
  ext {
    fulcrumVersion = "0.13.0"
  }
  
  dependencies {
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:2.18.0"
  }

  test {
    exclude "**/*IT.class"
  }
  
  task integrationTest(type: Test, description: "Runs integration tests.", group: "Verification") {
    include "**/*IT.class"
  }

  jacoco {
    toolVersion = "0.8.1"
  }
  
  javadoc {
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
      options.addStringOption("quiet", "-html5")
    }
  }

  jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    reports {
      html.enabled true
      xml.enabled true
      csv.enabled false
    }
  }

  // invoke this task when ready to publish to Bintray
  bintrayUpload {
    dependsOn ":bintrayCredentialsCheck"
  }
}

subprojects {
  dependencies {
    testCompile project(":").sourceSets.test.output
  }
}

task jacocoRootReport(type: JacocoReport) {
  dependsOn = allprojects.test
  additionalSourceDirs = files(allprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
  classDirectories = files(allprojects.sourceSets.main.output)
  executionData = files(allprojects.jacocoTestReport.executionData)
  reports {
    html.enabled true
    xml.enabled true
    csv.enabled false
  }
  onlyIf = {
    true
  }
  doFirst {
    executionData = files(executionData.findAll {
      it.exists()
    })
  }
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: ["sample/**", "**/*Uncovered*"])
    })
  }
}

def packageName = "zerolog-core"

dependencies {
  compile "com.obsidiandynamics.fulcrum:fulcrum-func:${fulcrumVersion}"
  compile "com.obsidiandynamics.fulcrum:fulcrum-io:${fulcrumVersion}"
  compile "com.obsidiandynamics.fulcrum:fulcrum-props:${fulcrumVersion}"

  testCompile "com.obsidiandynamics.fulcrum:fulcrum-assert:${fulcrumVersion}"
  testCompile "com.obsidiandynamics.fulcrum:fulcrum-dyno:${fulcrumVersion}"
  testCompile "com.obsidiandynamics.fulcrum:fulcrum-testmark:${fulcrumVersion}"
  testCompile "org.slf4j:slf4j-api:1.7.25"
  testCompile "log4j:log4j:1.2.17"
  testCompile "org.tinylog:tinylog:1.3.4"
  testRuntime "com.obsidiandynamics.fulcrum:fulcrum-launcher:${fulcrumVersion}"
  testRuntime "org.slf4j:slf4j-log4j12:1.7.25"
}

project.ext.set("launcherClasspath", new org.gradle.api.internal.file.UnionFileCollection())
project.ext.set("launcherClasses", new ArrayList())

task addLauncherApps() {
  project(":").launcherClasspath += sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.bench.AllBenchmarks"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.bench.BaselineBenchmark"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.bench.JulBenchmark"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.bench.JulLambdaBenchmark"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.bench.Log4jBenchmark"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.bench.Slf4jBenchmark"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.bench.TinyLogBenchmark"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.bench.ZlgBenchmark"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.off.BaselineOffVolumeTest"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.off.JulOffVolumeTest"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.off.Log4jOffVolumeTest"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.off.MinLogOffVolumeTest"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.off.Slf4jOffVolumeTest"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.off.TinyLogOffVolumeTest"
  project(":").launcherClasses += "com.obsidiandynamics.zerolog.off.ZlgOffVolumeTest"
}

task launch() {
  dependsOn allprojects*.tasks*.findByName("testClasses")
  doLast {
    def baseJvmArgs = "-XX:-MaxFDLimit -XX:+TieredCompilation -XX:+UseNUMA -XX:+UseCondCardMark " + 
                      "-XX:+UseBiasedLocking -Xms2G -Xmx2G -Xss1M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 " + 
                      "-XX:InitiatingHeapOccupancyPercent=0 -Djava.net.preferIPv4Stack=true " + 
                      "-Dlauncher.package.compress.level=3"
    javaexec {
      systemProperties = System.properties
      classpath = project(":").launcherClasspath
      main = "com.obsidiandynamics.launcher.Launcher"
      args = project(":").launcherClasses
      jvmArgs = Arrays.asList baseJvmArgs.split(" ")
      standardInput = System.in
    }
  }
}

jar {
  baseName packageName
  finalizedBy jacocoRootReport
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  baseName packageName
  classifier = "javadoc"
  from "$buildDir/docs/javadoc"
}
 
task sourcesJar(type: Jar) {
  baseName packageName
  from sourceSets.main.allSource
  classifier = "sources"
}
 
artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project(":").group
      artifactId packageName
      version project(":").version
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      url "${project(":").projectDir}/../repo"
    }
  }
}

def packageDesc = "Low-overhead logging fa√ßade for performance-intensive applications"
def repoName = "zerolog"
bintray {
  user = System.getenv(envUser)
  key = System.getenv(envKey)
  publications = ["mavenJava"]
  pkg {
    repo = "${repoName}"
    name = packageName
    userOrg = "obsidiandynamics"
    desc = packageDesc
    websiteUrl = "https://github.com/obsidiandynamics/${repoName}"
    licenses = ["BSD New"]
    vcsUrl = "https://github.com/obsidiandynamics/${repoName}"
    issueTrackerUrl = "https://github.com/obsidiandynamics/${repoName}/issues"
    publicDownloadNumbers = true
    githubRepo = "obsidiandynamics/${repoName}"
    override = true
    publish = true
    version {
      name = project(":").version
      desc = packageDesc
      released  = new Date()
      vcsTag = project(":").version
    }
  }
}
