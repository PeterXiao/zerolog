plugins {
  id "com.github.ben-manes.versions" version "0.22.0"
  id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
      username = findProperty('sonatype.username')
      password = findProperty('sonatype.password')
    }
  }
}

def baseJvmArgs = [
  "--add-opens=java.base/java.io=ALL-UNNAMED",
  "--add-opens=java.base/java.lang=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
  "--add-opens=java.base/java.nio=ALL-UNNAMED",
  "--add-opens=java.base/java.util=ALL-UNNAMED",
  "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
  "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
  "-XX:-MaxFDLimit"
]
project.ext.set("baseJvmArgs", baseJvmArgs)

allprojects {
  apply plugin: "java-library"
  apply plugin: "jacoco"
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  group = "com.obsidiandynamics.zerolog"
  version = "0.32.0"
  
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  //TODO remove when Javadoc errors have been resolved
  javadoc.options.addStringOption('Xdoclint:none', '-quiet')

  repositories {
    mavenCentral()
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots"
    }
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  signing {
    sign publishing.publications
  }
  
  ext {
    fulcrumVersion = "0.38.0"
    hazelcastVersion = "3.12.2"
    jmhVersion = "1.21"
    junitVersion = "4.12"
    log4jVersion = "1.2.17"
    mockitoVersion = "4.6.1"
    slf4jVersion = "1.7.25"
    tinylogVersion = "1.3.6"
  }
  
  dependencies {
    testImplementation "com.obsidiandynamics.fulcrum:fulcrum-assert:${fulcrumVersion}"
    testImplementation "com.obsidiandynamics.fulcrum:fulcrum-junit:${fulcrumVersion}"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
  }

  test {
    exclude "**/*IT.class"
    jvmArgs += baseJvmArgs
  }

  task integrationTest(type: Test, description: "Runs integration tests.", group: "Verification") {
    include "**/*IT.class"
    jvmArgs += baseJvmArgs
  }

  jacoco {
    toolVersion = "0.8.8"
  }

  jacocoTestReport {
    additionalSourceDirs.from = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output)
    reports {
      html.required = true
      xml.required = true
      csv.required = false
    }
  }
}

subprojects {
  dependencies {
    testImplementation project(":").sourceSets.test.output
  }
}

task jacocoRootReport(type: JacocoReport) {
  mustRunAfter = allprojects.test + allprojects.javadoc
  additionalSourceDirs.from = files(allprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from = files(allprojects.sourceSets.main.allSource.srcDirs)
  classDirectories.from = files(allprojects.sourceSets.main.output)
  executionData.setFrom project.fileTree(dir: '.', include: ['**/build/jacoco/test.exec'])
  reports {
    html.required = true
    xml.required = true
    csv.required = false
  }
  onlyIf = {
    true
  }
  afterEvaluate {
    classDirectories.from = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: ["sample/**", "**/*Uncovered*"])
    })
  }
}

def packageName = "zerolog-core"
def packageDescription = "Low-overhead logging fa√ßade for performance-intensive applications"

dependencies {
  api "com.obsidiandynamics.fulcrum:fulcrum-format:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-func:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-io:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-props:${fulcrumVersion}"
  api "com.obsidiandynamics.fulcrum:fulcrum-worker:${fulcrumVersion}"
}

jar {
  finalizedBy jacocoRootReport
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = packageName
      from components.java
      pom {
        name = packageName
        description = packageDescription
        url = 'https://github.com/obsidiandynamics/zerolog'
        licenses {
          license {
            name = 'BSD 3-Clause License'
            url = 'https://opensource.org/licenses/BSD-3-Clause'
          }
        }
        developers {
          developer {
            id = 'ekoutanov'
            name = 'Emil Koutanov'
            email = 'ekoutanov@gmail.com'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/obsidiandynamics/zerolog.git'
          developerConnection = 'scm:git:ssh://github.com/obsidiandynamics/zerolog.git'
          url = 'https://github.com/obsidiandynamics/zerolog'
        }
      }
    }
  }
}
